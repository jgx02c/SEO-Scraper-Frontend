{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshuagoodman/Documents/GitHub/leaps-dash/src/pages/_document.tsx"],"sourcesContent":["import { Html, Head, Main, NextScript } from \"next/document\";\n\nexport default function Document() {\n  return (\n    <Html lang=\"en\">\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBACE,qKAAC,yHAAA,CAAA,OAAI;QAAC,MAAK;;0BACT,qKAAC,yHAAA,CAAA,OAAI;;;;;0BACL,qKAAC;;kCACC,qKAAC,yHAAA,CAAA,OAAI;;;;;kCACL,qKAAC,yHAAA,CAAA,aAAU;;;;;;;;;;;;;;;;;AAInB"}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshuagoodman/Documents/GitHub/leaps-dash/src/pages/_app.tsx"],"sourcesContent":["import \"@/styles/globals.css\";\nimport type { AppProps } from \"next/app\";\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />;\n}\n"],"names":[],"mappings":";;;;;;AAGe,SAAS,IAAI,EAAE,SAAS,EAAE,SAAS,EAAY;IAC5D,qBAAO,qKAAC;QAAW,GAAG,SAAS;;;;;;AACjC"}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshuagoodman/Documents/GitHub/leaps-dash/src/components/ui/input.tsx"],"sourcesContent":["// components/Input.tsx\nimport React, { InputHTMLAttributes } from \"react\";\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  className?: string;\n}\n\nexport const Input: React.FC<InputProps> = ({ className = \"\", ...props }) => (\n  <input \n    className={`w-full px-4 py-2 rounded-lg border border-gray-600 focus:outline-none focus:border-blue-500 bg-gray-700 text-white ${className}`} \n    {...props} \n  />\n);\n\n\n"],"names":[],"mappings":"AAAA,uBAAuB;;;;;;AAOhB,MAAM,QAA8B,CAAC,EAAE,YAAY,EAAE,EAAE,GAAG,OAAO,iBACtE,qKAAC;QACC,WAAW,CAAC,mHAAmH,EAAE,WAAW;QAC3I,GAAG,KAAK"}},
    {"offset": {"line": 137, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshuagoodman/Documents/GitHub/leaps-dash/src/components/ui/button.tsx"],"sourcesContent":["// components/Button.tsx\nimport React, { ButtonHTMLAttributes, ReactNode } from \"react\";\n\ninterface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n  className?: string;\n  children: ReactNode;\n  variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';\n  size?: 'default' | 'sm' | 'lg' | 'icon';\n}\n\nconst getVariantStyles = (variant: ButtonProps['variant'] = 'default') => {\n  const variants = {\n    default: 'bg-primary text-white hover:bg-primary/90',\n    destructive: 'bg-red-600 text-white hover:bg-red-700',\n    outline: 'border border-gray-300 bg-transparent hover:bg-gray-100',\n    secondary: 'bg-gray-200 text-gray-900 hover:bg-gray-300',\n    ghost: 'hover:bg-gray-100',\n    link: 'text-blue-600 underline-offset-4 hover:underline'\n  };\n  return variants[variant];\n};\n\nconst getSizeStyles = (size: ButtonProps['size'] = 'default') => {\n  const sizes = {\n    default: 'h-9 px-4 py-2',\n    sm: 'h-8 px-3 py-1 text-sm',\n    lg: 'h-10 px-8 py-3',\n    icon: 'h-9 w-9 p-2'\n  };\n  return sizes[size];\n};\n\nexport const Button: React.FC<ButtonProps> = ({ \n  className = \"\", \n  children, \n  variant = 'default',\n  size = 'default',\n  ...props \n}) => (\n  <button \n    className={`\n      rounded-lg \n      font-medium \n      transition-colors \n      duration-200 \n      focus:outline-none \n      focus:ring-2 \n      focus:ring-blue-500 \n      ${getVariantStyles(variant)}\n      ${getSizeStyles(size)}\n      ${className}\n    `} \n    {...props}\n  >\n    {children}\n  </button>\n);"],"names":[],"mappings":"AAAA,wBAAwB;;;;;;AAUxB,MAAM,mBAAmB,CAAC,UAAkC,SAAS;IACnE,MAAM,WAAW;QACf,SAAS;QACT,aAAa;QACb,SAAS;QACT,WAAW;QACX,OAAO;QACP,MAAM;IACR;IACA,OAAO,QAAQ,CAAC,QAAQ;AAC1B;AAEA,MAAM,gBAAgB,CAAC,OAA4B,SAAS;IAC1D,MAAM,QAAQ;QACZ,SAAS;QACT,IAAI;QACJ,IAAI;QACJ,MAAM;IACR;IACA,OAAO,KAAK,CAAC,KAAK;AACpB;AAEO,MAAM,SAAgC,CAAC,EAC5C,YAAY,EAAE,EACd,QAAQ,EACR,UAAU,SAAS,EACnB,OAAO,SAAS,EAChB,GAAG,OACJ,iBACC,qKAAC;QACC,WAAW,CAAC;;;;;;;;MAQV,EAAE,iBAAiB,SAAS;MAC5B,EAAE,cAAc,MAAM;MACtB,EAAE,UAAU;IACd,CAAC;QACA,GAAG,KAAK;kBAER"}},
    {"offset": {"line": 189, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 195, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshuagoodman/Documents/GitHub/leaps-dash/src/components/ui/card.tsx"],"sourcesContent":["// components/Card.tsx\nimport React, { ReactNode } from \"react\";\n\ninterface CardProps {\n  className?: string;\n  children: ReactNode;\n}\n\nexport const Card: React.FC<CardProps> = ({ className = \"\", children }) => (\n  <div className={`bg-gray-800 rounded-xl shadow-lg border border-gray-700 ${className}`}>\n    {children}\n  </div>\n);\n\nexport const CardContent: React.FC<CardProps> = ({ className = \"\", children }) => (\n  <div className={`p-6 space-y-4 ${className}`}>\n    {children}\n  </div>\n);"],"names":[],"mappings":"AAAA,sBAAsB;;;;;;;AAQf,MAAM,OAA4B,CAAC,EAAE,YAAY,EAAE,EAAE,QAAQ,EAAE,iBACpE,qKAAC;QAAI,WAAW,CAAC,wDAAwD,EAAE,WAAW;kBACnF;;;;;;AAIE,MAAM,cAAmC,CAAC,EAAE,YAAY,EAAE,EAAE,QAAQ,EAAE,iBAC3E,qKAAC;QAAI,WAAW,CAAC,cAAc,EAAE,WAAW;kBACzC"}},
    {"offset": {"line": 218, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 224, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshuagoodman/Documents/GitHub/leaps-dash/src/components/ui/dialog.tsx"],"sourcesContent":["// components/Dialog.tsx\nimport React from \"react\";\n\ninterface DialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  children: React.ReactNode;\n}\n\nexport const Dialog: React.FC<DialogProps> = ({ open, onOpenChange, children }) => {\n  if (!open) return null;\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4\">\n      <div className=\"bg-gray-800 rounded-lg shadow-lg w-[90vw] h-[70vh]\">\n        <button \n          className=\"absolute top-3 right-3 text-white hover:text-gray-300\" \n          onClick={() => onOpenChange(false)}\n        >\n          âœ•\n        </button>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport const DialogContent: React.FC<{ children: React.ReactNode, className?: string }> = ({ \n  children, \n  className = \"\" \n}) => {\n  return (\n    <div className={`flex h-full ${className}`}>\n      {children}\n    </div>\n  );\n};\n\nexport const DialogHeader: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  return <div className=\"mb-4 text-xl font-bold text-white\">{children}</div>;\n};\n\nexport const DialogTitle: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  return <h2>{children}</h2>;\n};"],"names":[],"mappings":"AAAA,wBAAwB;;;;;;;;;AASjB,MAAM,SAAgC,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,QAAQ,EAAE;IAC5E,IAAI,CAAC,MAAM,OAAO;IAClB,qBACE,qKAAC;QAAI,WAAU;kBACb,cAAA,qKAAC;YAAI,WAAU;;8BACb,qKAAC;oBACC,WAAU;oBACV,SAAS,IAAM,aAAa;8BAC7B;;;;;;gBAGA;;;;;;;;;;;;AAIT;AAEO,MAAM,gBAA6E,CAAC,EACzF,QAAQ,EACR,YAAY,EAAE,EACf;IACC,qBACE,qKAAC;QAAI,WAAW,CAAC,YAAY,EAAE,WAAW;kBACvC;;;;;;AAGP;AAEO,MAAM,eAAwD,CAAC,EAAE,QAAQ,EAAE;IAChF,qBAAO,qKAAC;QAAI,WAAU;kBAAqC;;;;;;AAC7D;AAEO,MAAM,cAAuD,CAAC,EAAE,QAAQ,EAAE;IAC/E,qBAAO,qKAAC;kBAAI;;;;;;AACd"}},
    {"offset": {"line": 291, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 297, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshuagoodman/Documents/GitHub/leaps-dash/src/components/ui/slider.tsx"],"sourcesContent":["import React from \"react\";\n\ninterface SliderProps {\n  value: number;\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  min: number;\n  max: number;\n  step: number;\n}\n\nexport const Slider: React.FC<SliderProps> = ({ value, onChange, min, max, step }) => {\n  return (\n    <div className=\"flex flex-col space-y-2\">\n      <input\n        type=\"range\"\n        className=\"w-full\"\n        value={value}\n        onChange={onChange}\n        min={min}\n        max={max}\n        step={step}\n      />\n      <span className=\"text-white\">{value.toFixed(1)}</span>\n    </div>\n  );\n};\n"],"names":[],"mappings":";;;;;AAUO,MAAM,SAAgC,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;IAC/E,qBACE,qKAAC;QAAI,WAAU;;0BACb,qKAAC;gBACC,MAAK;gBACL,WAAU;gBACV,OAAO;gBACP,UAAU;gBACV,KAAK;gBACL,KAAK;gBACL,MAAM;;;;;;0BAER,qKAAC;gBAAK,WAAU;0BAAc,MAAM,OAAO,CAAC;;;;;;;;;;;;AAGlD"}},
    {"offset": {"line": 334, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 372, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshuagoodman/Documents/GitHub/leaps-dash/src/pages/index.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Send, Settings, Plus, RefreshCw } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Select, SelectItem } from \"@/components/select\";\nimport { Alert, AlertDescription } from \"@/components/alert\";\nimport { useRouter } from \"next/router\";\n\n// Enhanced interfaces for type safety\ninterface Message {\n  role: string;\n  text: string;\n  timestamp: string;\n}\n\ninterface Conversation {\n  id: string;\n  title: string;\n  messages: Message[];\n  createdAt: string;\n  lastUpdated: string;\n}\n\nconst ChatBot = () => {\n  // Existing state\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const [openAiModel, setOpenAiModel] = useState(\"gpt-4\");\n  const [temperature, setTemperature] = useState(0.7);\n  const [presencePenalty, setPresencePenalty] = useState(0.5);\n  const [vectorStores, setVectorStores] = useState<string[]>([]);\n  const [selectedVectorStore, setSelectedVectorStore] = useState(\"1\");\n  const [prompt, setPrompt] = useState(\"Default prompt\");\n  \n  // Error states\n  const [settingsError, setSettingsError] = useState(false);\n  const [conversationsError, setConversationsError] = useState(false);\n\n  // New state for conversations\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [currentConversationId, setCurrentConversationId] = useState<string | null>(null);\n  \n  const messagesEndRef = useRef<HTMLDivElement | null>(null);\n  const router = useRouter();\n\n  // Load conversations on mount\n  useEffect(() => {\n    loadConversations();\n    loadSettings();\n  }, []);\n\n  const loadConversations = async () => {\n    try {\n      setConversationsError(false);\n      const response = await fetch(\"https://leaps-scraper.onrender.com/get_conversations\");\n      \n      if (response.ok) {\n        const data = await response.json();\n        setConversations(data);\n      } else {\n        // If conversations fail to load, use empty array and show error state\n        setConversationsError(true);\n        setConversations([]);\n        console.error(\"Failed to load conversations, starting with empty list\");\n      }\n    } catch (error) {\n      // Handle network errors or other issues\n      console.error(\"Error loading conversations:\", error);\n      setConversationsError(true);\n      setConversations([]);\n    }\n  };\n\n  const loadSettings = async () => {\n    try {\n      setSettingsError(false);\n      const response = await fetch(\"https://leaps-scraper.onrender.com/get_settings\");\n      \n      if (response.ok) {\n        const settings = await response.json();\n        setOpenAiModel(settings.model || \"gpt-4\");\n        setTemperature(settings.temperature || 0.7);\n        setPresencePenalty(settings.presence_penalty || 0.5);\n        setSelectedVectorStore(settings.vectorStore || \"1\");\n        setPrompt(settings.prompt || \"Default prompt\");\n        \n        if (settings.vectorStores && Array.isArray(settings.vectorStores)) {\n          setVectorStores(settings.vectorStores);\n        }\n      } else {\n        // If settings fail to load, use defaults and show error state\n        setSettingsError(true);\n        // Set default values\n        setOpenAiModel(\"gpt-4\");\n        setTemperature(0.7);\n        setPresencePenalty(0.5);\n        setSelectedVectorStore(\"1\");\n        setPrompt(\"Default prompt\");\n        setVectorStores([\"1\", \"2\", \"3\"]); // Default vector stores\n        console.error(\"Failed to load settings, using defaults\");\n      }\n    } catch (error) {\n      // Handle network errors or other issues\n      console.error(\"Error loading settings:\", error);\n      setSettingsError(true);\n      // Set the same default values\n      setOpenAiModel(\"gpt-4\");\n      setTemperature(0.7);\n      setPresencePenalty(0.5);\n      setSelectedVectorStore(\"1\");\n      setPrompt(\"Default prompt\");\n      setVectorStores([\"1\", \"2\", \"3\"]); // Default vector stores\n    }\n  };\n\n  const saveSettings = async () => {\n    try {\n      const response = await fetch(\"https://leaps-scraper.onrender.com/save_settings\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          model: openAiModel,\n          temperature,\n          presence_penalty: presencePenalty,\n          vectorStore: selectedVectorStore,\n          prompt,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to save settings');\n      }\n\n      setSettingsOpen(false);\n    } catch (error) {\n      console.error(\"Error saving settings:\", error);\n    }\n  };\n\n  const createNewConversation = () => {\n    const newConversation: Conversation = {\n      id: Date.now().toString(),\n      title: \"New Conversation\",\n      messages: [],\n      createdAt: new Date().toISOString(),\n      lastUpdated: new Date().toISOString()\n    };\n\n    setConversations([newConversation, ...conversations]);\n    setCurrentConversationId(newConversation.id);\n    setMessages([]);\n  };\n\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n\n    const timestamp = new Date().toISOString();\n    const newMessage: Message = { \n      role: \"user\", \n      text: input,\n      timestamp \n    };\n\n    // Create new conversation if none exists\n    if (!currentConversationId) {\n      createNewConversation();\n    }\n\n    const updatedMessages = [...messages, newMessage];\n    setMessages(updatedMessages);\n    setInput(\"\");\n    setLoading(true);\n\n    try {\n      const response = await fetch(\"https://leaps-scraper.onrender.com/generate_insight\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          message: input,\n          conversationId: currentConversationId,\n          timestamp\n        }),\n      });\n\n      const botResponse = await response.text();\n      const botMessage: Message = {\n        role: \"bot\",\n        text: botResponse,\n        timestamp: new Date().toISOString()\n      };\n\n      const finalMessages = [...updatedMessages, botMessage];\n      setMessages(finalMessages);\n\n      // Update conversation in state\n      const updatedConversations = conversations.map(conv => {\n        if (conv.id === currentConversationId) {\n          return {\n            ...conv,\n            messages: finalMessages,\n            lastUpdated: new Date().toISOString(),\n            title: finalMessages[0].text.slice(0, 30) + \"...\"  // Set title to first message\n          };\n        }\n        return conv;\n      });\n\n      setConversations(updatedConversations);\n\n      // Save conversation to backend\n      await saveConversation(currentConversationId!, finalMessages);\n\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const saveConversation = async (conversationId: string, messages: Message[]) => {\n    try {\n      await fetch(\"https://leaps-scraper.onrender.com/save_conversation\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          conversationId,\n          messages\n        }),\n      });\n    } catch (error) {\n      console.error(\"Error saving conversation:\", error);\n    }\n  };\n\n  const loadConversation = async (conversationId: string) => {\n    try {\n      const conversation = conversations.find(c => c.id === conversationId);\n      if (conversation) {\n        setMessages(conversation.messages);\n        setCurrentConversationId(conversationId);\n      }\n    } catch (error) {\n      console.error(\"Error loading conversation:\", error);\n    }\n  };\n\n  // Existing useEffect for scroll behavior\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages, loading]);\n\n  return (\n    <div className=\"flex h-screen w-full bg-gray-900 p-4\">\n      {/* Sidebar */}\n      <div className=\"w-64 bg-gray-800 mr-4 rounded-lg flex flex-col\">\n        <div className=\"p-4 border-b border-gray-700 space-y-2\">\n          <Button \n            className=\"w-full bg-blue-600 text-white flex items-center justify-center gap-2\"\n            onClick={createNewConversation}\n          >\n            <Plus size={18} />\n            New Chat\n          </Button>\n          {conversationsError && (\n            <Alert variant=\"destructive\" className=\"bg-red-900 border-red-800\">\n              <AlertDescription className=\"flex items-center justify-between\">\n                Failed to load chats\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={loadConversations}\n                  className=\"ml-2\"\n                >\n                  <RefreshCw size={16} className=\"mr-1\" />\n                  Retry\n                </Button>\n              </AlertDescription>\n            </Alert>\n          )}\n        </div>\n        <div className=\"flex-1 overflow-y-auto\">\n          {conversations.map((conversation) => (\n            <div\n              key={conversation.id}\n              className={`p-3 cursor-pointer hover:bg-gray-700 ${\n                currentConversationId === conversation.id ? 'bg-gray-700' : ''\n              }`}\n              onClick={() => loadConversation(conversation.id)}\n            >\n              <div className=\"text-white truncate\">{conversation.title}</div>\n              <div className=\"text-gray-400 text-sm\">\n                {new Date(conversation.lastUpdated).toLocaleDateString()}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Main Chat Area */}\n      <Card className=\"flex-1 bg-gray-800 shadow-lg flex flex-col\">\n        <CardContent className=\"flex flex-col h-full p-6\">\n          {/* Header */}\n          <div className=\"flex justify-between mb-4 flex-shrink-0\">\n            <Button className=\"bg-blue-600 text-white\" onClick={() => router.push(\"/business\")}>\n              View Businesses\n            </Button>\n            <h1 className=\"text-2xl font-bold text-white\">Leaps AI ChatBot V.1.0</h1>\n            <Button className=\"bg-gray-600 text-white\" onClick={() => setSettingsOpen(true)}>\n              <Settings size={18} />\n            </Button>\n          </div>\n\n          {/* Messages Container */}\n          <div className=\"flex-grow overflow-hidden flex flex-col min-h-0\">\n            <div className=\"flex-grow overflow-y-auto space-y-4 bg-gray-900 p-4 rounded-lg\">\n              {messages.map((msg, index) => (\n                <div\n                  key={index}\n                  className={`max-w-[75%] rounded-lg p-3 ${\n                    msg.role === \"user\" ? \"ml-auto bg-blue-600 text-right text-white\" : \"mr-auto bg-gray-700 text-white\"\n                  }`}\n                >\n                  <div>{msg.text}</div>\n                  <div className=\"text-xs opacity-50 mt-1\">\n                    {new Date(msg.timestamp).toLocaleTimeString()}\n                  </div>\n                </div>\n              ))}\n              {loading && (\n                <div className=\"mr-auto rounded-lg bg-gray-700 p-3 text-white\">\n                  AI is thinking...\n                </div>\n              )}\n              <div ref={messagesEndRef} />\n            </div>\n          </div>\n\n          {/* Input Container */}\n          <div className=\"flex gap-2 mt-4 flex-shrink-0\">\n            <Input\n              className=\"flex-grow bg-gray-700 text-white placeholder-gray-400\"\n              placeholder=\"Type a message...\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={(e) => e.key === \"Enter\" && sendMessage()}\n            />\n            <Button onClick={sendMessage} className=\"bg-blue-600 text-white hover:bg-blue-700\">\n              <Send size={18} />\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Settings Dialog */}\n      <Dialog open={settingsOpen} onOpenChange={setSettingsOpen}>\n        <DialogContent className=\"flex\">\n          <div className=\"w-1/4 space-y-4 p-4 border-r border-gray-600\">\n            <DialogHeader>\n              <DialogTitle>Chatbot Settings</DialogTitle>\n            </DialogHeader>\n            {settingsError && (\n              <Alert variant=\"destructive\" className=\"bg-red-900 border-red-800\">\n                <AlertDescription className=\"flex items-center justify-between\">\n                  Failed to load settings\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    onClick={loadSettings}\n                    className=\"ml-2\"\n                  >\n                    <RefreshCw size={16} className=\"mr-1\" />\n                    Retry\n                  </Button>\n                </AlertDescription>\n              </Alert>\n            )}\n            <Select value={openAiModel} onValueChange={setOpenAiModel}>\n              <SelectItem value=\"gpt-4o\">GPT-4o</SelectItem>\n              <SelectItem value=\"gpt-4o-mini\">GPT-4o-Mini</SelectItem>\n              <SelectItem value=\"gpt-3o\">GPT-3.5</SelectItem>\n            </Select>\n            <div className=\"space-y-2\">\n              <label className=\"text-white text-sm\">Temperature: {temperature}</label>\n              <Slider \n                value={temperature} \n                onValueChange={setTemperature}\n                min={0.1} \n                max={1} \n                step={0.1} \n              />\n            </div>\n            <div className=\"space-y-2\">\n              <label className=\"text-white text-sm\">Presence Penalty: {presencePenalty}</label>\n              <Slider \n                value={presencePenalty} \n                onValueChange={setPresencePenalty}\n                min={0.1} \n                max={1} \n                step={0.1} \n              />\n            </div>\n            <Select value={selectedVectorStore} onValueChange={setSelectedVectorStore}>\n              {vectorStores.map((store) => (\n                <SelectItem key={store} value={store}>{store}</SelectItem>\n              ))}\n            </Select>\n            <Button onClick={saveSettings} className=\"bg-blue-600 text-white w-full\">\n              Save Settings\n            </Button>\n          </div>\n          <div className=\"w-3/4 p-4\">\n            <div className=\"h-full p-3 bg-gray-200 rounded-lg text-black overflow-auto\">\n              {prompt}\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default ChatBot;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1117, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}